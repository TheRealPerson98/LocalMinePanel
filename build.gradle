plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'com.gradleup.shadow' version '8.3.5'
}

group 'com.person98'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.0'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'com.person98.localminepanel'
    mainClass = 'com.person98.localminepanel.MinePanelLocal'
}

javafx {
    version = '17.0.6'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing']
}

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.2')
    implementation('com.dlsc.formsfx:formsfx-core:11.6.0') {
        exclude(group: 'org.openjfx')
    }
    implementation('eu.hansolo:tilesfx:11.48') {
        exclude(group: 'org.openjfx')
    }
    implementation 'de.jensd:fontawesomefx-fontawesome:4.7.0-9.1.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    def currentOS = org.gradle.internal.os.OperatingSystem.current()
    def platform
    if (currentOS.isWindows()) {
        platform = 'win'
    } else if (currentOS.isLinux()) {
        platform = 'linux'
    } else if (currentOS.isMacOsX()) {
        platform = 'mac'
    }

    implementation "org.openjfx:javafx-base:${javafx.version}:${platform}"
    implementation "org.openjfx:javafx-graphics:${javafx.version}:${platform}"
    implementation "org.openjfx:javafx-controls:${javafx.version}:${platform}"
    implementation "org.openjfx:javafx-fxml:${javafx.version}:${platform}"
    implementation "org.openjfx:javafx-web:${javafx.version}:${platform}"
    implementation "org.openjfx:javafx-swing:${javafx.version}:${platform}"
}

test {
    useJUnitPlatform()
}

// Create a task to generate a launcher class
task createLauncher {
    doLast {
        def launcherFile = new File("$projectDir/src/main/java/com/person98/localminepanel/Launcher.java")
        launcherFile.parentFile.mkdirs()
        launcherFile.text = """
package com.person98.localminepanel;

public class Launcher {
    public static void main(String[] args) {
        MinePanelLocal.main(args);
    }
}
"""
    }
}

compileJava.dependsOn createLauncher

shadowJar {
    manifest {
        attributes(
                'Main-Class': 'com.person98.localminepanel.Launcher',
                'Multi-Release': true
        )
    }

    archiveFileName = 'LocalMinePanel.jar'

    mergeServiceFiles()
    configurations = [project.configurations.runtimeClasspath]
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.person98.localminepanel.Launcher',
                'Multi-Release': true
        )
    }
}

tasks.shadowJar {
    archiveClassifier.set('')
}

application {
    mainClass = 'com.person98.localminepanel.Launcher'
}